for (i in 2:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
cost <- cost_distance(Sigma.vectors[,,1], Sigma.vectors[,,i])
matching <- RcppHungarian::HungarianSolver(cost)$pairs
Sigma.vectors[,,i] <- Sigma.vectors[,matching[,2],i]
Sigma.values[,i] <- decomp$values[matching[,2]] # Reorder based on optimal matching
}
# Plot distribution
dat <- rbind(t(Sigma.vectors[,1,]),
t(Sigma.vectors[,2,]))
col <- c(rep("black", dim(Sigma)[3]), rep("red", dim(Sigma)[3]))
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
# Initialize n=1 case
decomp <- eigen(Sigma[,,1])
Sigma.vectors[,,1] <- decomp$vectors
Sigma.values[,1] <- decomp$values
# Now match up the rest to this first one
for (i in 2:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
Sigma.vectors.expanded <-  cbind(Sigma.vectors[,,i], -Sigma.vectors[,,i])
cost <- cost_distance(Sigma.vectors[,,1],Sigma.vectors.expanded)
matching <- RcppHungarian::HungarianSolver(cost)$pairs[,2]
Sigma.vectors[,,i] <- Sigma.vectors.expanded[,matching]
Sigma.values[,i] <- decomp$values[matching] # Reorder based on optimal matching
}
col <- c(rep("black", dim(Sigma)[3]), rep("red", dim(Sigma)[3]))
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
# Initialize n=1 case
decomp <- eigen(Sigma[,,1])
Sigma.vectors[,,1] <- decomp$vectors
Sigma.values[,1] <- decomp$values
# Now match up the rest to this first one
for (i in 2:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
Sigma.vectors.expanded <-  cbind(Sigma.vectors[,,i], -Sigma.vectors[,,i])
cost <- cost_distance(Sigma.vectors[,,1],Sigma.vectors.expanded)
matching <- RcppHungarian::HungarianSolver(cost)$pairs[,2]
Sigma.vectors[,,i] <- Sigma.vectors.expanded[,matching]
Sigma.values[,i] <- decomp$values[matching] # Reorder based on optimal matching
}
col <- c(rep("black", dim(Sigma)[3]), rep("red", dim(Sigma)[3]))
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
Sigma.vectors
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
# Initialize n=1 case
decomp <- eigen(Sigma[,,1])
Sigma.vectors[,,1] <- decomp$vectors
Sigma.values[,1] <- decomp$values
# Now match up the rest to this first one
for (i in 2:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
Sigma.vectors.expanded <-  cbind(Sigma.vectors[,,i], -Sigma.vectors[,,i])
cost <- cost_distance(Sigma.vectors[,,1],Sigma.vectors.expanded)
matching <- RcppHungarian::HungarianSolver(cost)$pairs[,2]
Sigma.vectors[,,i] <- Sigma.vectors.expanded[,matching]
Sigma.values[,i] <- decomp$values[matching] # Reorder based on optimal matching
}
col <- c(rep("black", dim(Sigma)[3]), rep("red", dim(Sigma)[3]))
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
# Create a distribution of matricies that have identical eigenvectors but there
# is randomness in the eigenvalues and a tiny bit of added noise from a wishart
const <- 1/sqrt(2)
V <- cbind(c(const,const), c(const,-const))
Sigma <- array(0, dim=c(2, 2, 100))
for (i in 1:dim(Sigma)[3]){
Sigma[,,i] <- V %*% diag(sample(c(1, 1.3))) %*% t(V) + rWishart(1, 50, 0.002*diag(2))[,,1]
}
# Plot the "true" eigenvectors
plot(V, col=c("black", "red"), xlim=c(-1,1), ylim=c(-1,1))
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
# Initialize n=1 case
decomp <- eigen(Sigma[,,1])
Sigma.vectors[,,1] <- decomp$vectors
Sigma.values[,1] <- decomp$values
# Now match up the rest to this first one
for (i in 2:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
Sigma.vectors.expanded <-  cbind(Sigma.vectors[,,i], -Sigma.vectors[,,i])
cost <- cost_distance(Sigma.vectors[,,1],Sigma.vectors.expanded)
matching <- RcppHungarian::HungarianSolver(cost)$pairs[,2]
Sigma.vectors[,,i] <- Sigma.vectors.expanded[,matching]
Sigma.values[,i] <- decomp$values[matching] # Reorder based on optimal matching
}
# Plot distribution
dat <- rbind(t(Sigma.vectors[,1,]),
t(Sigma.vectors[,2,]))
col <- c(rep("black", dim(Sigma)[3]), rep("red", dim(Sigma)[3]))
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
# V1 and V2 are two different sets of eigenvectors
# Note: not the most efficient but easy to code for this example
cost_distance <- function(V1, V2){
n1 <- ncol(V1)
n2 <- ncol(V2)
D <-  as.matrix(dist(t(cbind(V1, V2))))
return(D[1:n1, (n1+1):(n1+n2)])
}
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
# Initialize n=1 case
decomp <- eigen(Sigma[,,1])
Sigma.vectors[,,1] <- decomp$vectors
Sigma.values[,1] <- decomp$values
# Now match up the rest to this first one
for (i in 2:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
cost <- cost_distance(Sigma.vectors[,,1], Sigma.vectors[,,i])
matching <- RcppHungarian::HungarianSolver(cost)$pairs
Sigma.vectors[,,i] <- Sigma.vectors[,matching[,2],i]
Sigma.values[,i] <- decomp$values[matching[,2]] # Reorder based on optimal matching
}
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
# Initialize n=1 case
decomp <- eigen(Sigma[,,1])
Sigma.values[,1] <- decomp$values
# Now match up the rest to this first one
for (i in 2:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
cost <- cost_distance(Sigma.vectors[,,1], Sigma.vectors[,,i])
matching <- RcppHungarian::HungarianSolver(cost)$pairs
Sigma.vectors[,,i] <- Sigma.vectors[,matching[,2],i]
Sigma.values[,i] <- decomp$values[matching[,2]] # Reorder based on optimal matching
}
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
# V1 and V2 are two different sets of eigenvectors
# Note: not the most efficient but easy to code for this example
cost_distance <- function(V1, V2){
n1 <- ncol(V1)
n2 <- ncol(V2)
D <-  as.matrix(dist(t(cbind(V1, V2))))
return(D[1:n1, (n1+1):(n1+n2)])
}
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
# Initialize n=1 case
decomp <- eigen(Sigma[,,1])
Sigma.vectors[,,1] <- decomp$vectors
Sigma.values[,1] <- decomp$values
# Now match up the rest to this first one
for (i in 2:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
cost <- cost_distance(Sigma.vectors[,,1], Sigma.vectors[,,i])
matching <- RcppHungarian::HungarianSolver(cost)$pairs
Sigma.vectors[,,i] <- Sigma.vectors[,matching[,2],i]
Sigma.values[,i] <- decomp$values[matching[,2]] # Reorder based on optimal matching
}
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
for (i in 1:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
Sigma.values[,i] <- decomp$values
}
col <- c(rep("black", dim(Sigma)[3]), rep("red", dim(Sigma)[3]))
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
const <- 1/sqrt(2)
V <- cbind(c(const,const), c(const,-const))
Sigma <- array(0, dim=c(2, 2, 100))
for (i in 1:dim(Sigma)[3]){
Sigma[,,i] <- V %*% diag(sample(c(1, 1.3))) %*% t(V) + rWishart(1, 50, 0.002*diag(2))[,,1]
}
# Plot the "true" eigenvectors
plot(V, col=c("black", "red"), xlim=c(-1,1), ylim=c(-1,1))
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
for (i in 1:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
Sigma.values[,i] <- decomp$values
}
# Plot distribution of the first two Eigenvectors
dat <- rbind(t(Sigma.vectors[,1,]),
t(Sigma.vectors[,2,]))
col <- c(rep("black", dim(Sigma)[3]), rep("red", dim(Sigma)[3]))
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
# Initialize n=1 case
decomp <- eigen(Sigma[,,1])
Sigma.vectors[,,1] <- decomp$vectors
Sigma.values[,1] <- decomp$values
# Now match up the rest to this first one
for (i in 2:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
Sigma.vectors.expanded <-  cbind(Sigma.vectors[,,i], -Sigma.vectors[,,i])
cost <- cost_distance(Sigma.vectors[,,1],Sigma.vectors.expanded)
matching <- RcppHungarian::HungarianSolver(cost)$pairs[,2]
Sigma.vectors[,,i] <- Sigma.vectors.expanded[,matching]
Sigma.values[,i] <- decomp$values[matching] # Reorder based on optimal matching
}
# Plot distribution
dat <- rbind(t(Sigma.vectors[,1,]),
t(Sigma.vectors[,2,]))
col <- c(rep("black", dim(Sigma)[3]), rep("red", dim(Sigma)[3]))
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
# Plot distribution
dev.off()
dat <- rbind(t(Sigma.vectors[,1,]),
t(Sigma.vectors[,2,]))
col <- c(rep("black", dim(Sigma)[3]), rep("red", dim(Sigma)[3]))
plot(dat, col=col, xlim=c(-1,1), ylim=c(-1,1))
devtools::install()
dat
col
library(ggplot2)
rbind(dat, col) %>%
t()
set.seed(593903)
library(RcppHungarian)
library(ggplot2)
plot_arrows <- function(dat, col){
dat <- data.frame(dat, group=col)
colnames(dat) <- c("Coordinate 1", "Coordinate 2", "Eigenvector")
}
# Plot distribution of the first two Eigenvectors
dat <- rbind(t(Sigma.vectors[,1,]),
t(Sigma.vectors[,2,]))
col <- c(rep("1", dim(Sigma)[3]), rep("2", dim(Sigma)[3]))
dat <- data.frame(dat, group=col)
colnames(dat) <- c("Coordinate 1", "Coordinate 2", "Eigenvector")
dat
ggplot(dat, aes(xend=`Coordinate 1`, yend=`Coordinate 2`)) +
geom_segment(aes(x=0, y=0, color=Eigenvector), arrow=arrow(length=unit(0.1, "inches")))
ggplot(dat) +
geom_segment(aes(xend=`Coordinate 1`, yend=`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches"))) +
geom_segment(aes(xend=-`Coordinate 1`, yend=-`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches")))
plot_arrows <- function(dat, col){
dat <- data.frame(dat, group=col)
colnames(dat) <- c("Coordinate 1", "Coordinate 2", "Eigenvector")
ggplot(dat) +
geom_segment(aes(xend=`Coordinate 1`, yend=`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches"))) +
geom_segment(aes(xend=-`Coordinate 1`, yend=-`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches")))
}
plot_arrows(dat, col)
ggplot(dat) +
geom_segment(aes(xend=`Coordinate 1`, yend=`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches"))) +
geom_segment(aes(xend=-`Coordinate 1`, yend=-`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches"))) +
theme_minimal()
ggplot(dat) +
geom_segment(aes(xend=`Coordinate 1`, yend=`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches"))) +
geom_segment(aes(xend=-`Coordinate 1`, yend=-`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches"))) +
theme_minimal()+
xlab("Coordinate 1") +
ylab("Coordinate 2")
plot_arrows <- function(dat, col){
dat <- data.frame(dat, group=col)
colnames(dat) <- c("Coordinate 1", "Coordinate 2", "Eigenvector")
ggplot(dat) +
geom_segment(aes(xend=`Coordinate 1`, yend=`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches"))) +
geom_segment(aes(xend=-`Coordinate 1`, yend=-`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches"))) +
theme_minimal()+
xlab("Coordinate 1") +
ylab("Coordinate 2")
}
plot_arrows(dat, col)
set.seed(593903)
library(RcppHungarian)
library(ggplot2)
plot_arrows <- function(dat, col){
dat <- data.frame(dat, group=col)
colnames(dat) <- c("Coordinate 1", "Coordinate 2", "Eigenvector")
ggplot(dat) +
geom_segment(aes(xend=`Coordinate 1`, yend=`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches")), alpha=0.7) +
geom_segment(aes(xend=-`Coordinate 1`, yend=-`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches")), alpha=0.7) +
theme_minimal()+
xlab("Coordinate 1") +
ylab("Coordinate 2")+
scale_color_brewer(palette="Set1")
}
# Plot the "true" eigenvectors
plot_arrows(V, c("1", "2"))
# Create a distribution of matricies that have identical eigenvectors but there
# is randomness in the eigenvalues and a tiny bit of added noise from a wishart
const <- 1/sqrt(2)
V <- cbind(c(const,const), c(const,-const))
Sigma <- array(0, dim=c(2, 2, 100))
for (i in 1:dim(Sigma)[3]){
Sigma[,,i] <- V %*% diag(sample(c(1, 1.3))) %*% t(V) + rWishart(1, 50, 0.002*diag(2))[,,1]
}
# Plot the "true" eigenvectors
plot_arrows(V, c("1", "2"))
??elipse
?ellipse
??ellipse
# Create a distribution of matricies that have identical eigenvectors but there
# is randomness in the eigenvalues and a tiny bit of added noise from a wishart
const <- 1/sqrt(2)
V <- cbind(c(const,const), c(const,-const))
Sigma <- array(0, dim=c(2, 2, 100))
for (i in 1:dim(Sigma)[3]){
Sigma[,,i] <- V %*% diag(sample(c(1, 1.3))) %*% t(V) + rWishart(1, 50, 0.002*diag(2))[,,1]
}
# Plot the "true" eigenvectors
plot_arrows(V, c("1", "2"))
plot_arrows <- function(dat, col){
dat <- data.frame(dat, group=col)
colnames(dat) <- c("Coordinate 1", "Coordinate 2", "Eigenvector")
ggplot(dat) +
geom_segment(aes(xend=`Coordinate 1`, yend=`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches")), alpha=0.7) +
#geom_segment(aes(xend=-`Coordinate 1`, yend=-`Coordinate 2`, x=0, y=0, color=Eigenvector),
#             arrow=arrow(length=unit(0.1, "inches")), alpha=0.7) +
theme_minimal()+
xlab("Coordinate 1") +
ylab("Coordinate 2")+
scale_color_brewer(palette="Set1")
}
# Plot the "true" eigenvectors
plot_arrows(V, c("1", "2"))
plot_arrows <- function(dat, col){
dat <- data.frame(dat, group=col)
colnames(dat) <- c("Coordinate 1", "Coordinate 2", "Eigenvector")
ggplot(dat) +
geom_segment(aes(xend=`Coordinate 1`, yend=`Coordinate 2`, x=0, y=0, color=Eigenvector),
arrow=arrow(length=unit(0.1, "inches")), alpha=0.7) +
#geom_segment(aes(xend=-`Coordinate 1`, yend=-`Coordinate 2`, x=0, y=0, color=Eigenvector),
#             arrow=arrow(length=unit(0.1, "inches")), alpha=0.7) +
theme_minimal()+
xlab("Coordinate 1") +
ylab("Coordinate 2")+
scale_color_brewer(palette="Set1") +
ylim(c(-1,1))+
xlim(c(-1,1))
}
# Plot the "true" eigenvectors
plot_arrows(V, c("1", "2"))
# Decompose each sample
Sigma.vectors <- array(0, dim=dim(Sigma))
Sigma.values <- array(0, dim=c(dim(Sigma)[1], dim(Sigma)[3]))
for (i in 1:dim(Sigma)[3]){
decomp <- eigen(Sigma[,,i])
Sigma.vectors[,,i] <- decomp$vectors
Sigma.values[,i] <- decomp$values
}
# Plot distribution of the first two Eigenvectors
dat <- rbind(t(Sigma.vectors[,1,]),
t(Sigma.vectors[,2,]))
col <- c(rep("1", dim(Sigma)[3]), rep("2", dim(Sigma)[3]))
plot_arrows(dat, col)
imgurl <- "~/Research/logos/RcppHungarian.pdf"
sticker(imgurl, package="stray", p_size=8, s_x=1.05, s_y=.8, s_width=.7, p_y = 1.5,
filename="stray.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
install.packages("hexSticker")
imgurl <- "~/Research/logos/RcppHungarian.pdf"
sticker(imgurl, package="stray", p_size=8, s_x=1.05, s_y=.8, s_width=.7, p_y = 1.5,
filename="RcppHungarian.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
library(hexSticker)
imgurl <- "~/Research/logos/RcppHungarian.pdf"
sticker(imgurl, package="stray", p_size=8, s_x=1.05, s_y=.8, s_width=.7, p_y = 1.5,
filename="RcppHungarian.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
imgurl <- "~/Research/logos/RcppHungarian.png"
sticker(imgurl, package="stray", p_size=8, s_x=1.05, s_y=.8, s_width=.7, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
?sticker
sticker(imgurl, package="RcppHungarian", p_size=8, s_x=1.05, s_y=.8, s_width=.4, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
library(hexSticker)
setwd("~/Research/logos")
imgurl <- "~/Research/logos/RcppHungarian.png"
sticker(imgurl, package="RcppHungarian", p_size=8, s_x=1.05, s_y=.8, s_width=.4, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
library(hexSticker)
setwd("~/Research/logos")
imgurl <- "~/Research/logos/RcppHungarian.png"
sticker(imgurl, package="RcppHungarian", p_size=8, s_x=1.05, s_y=.8, s_width=.4, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
sticker(imgurl, package="RcppHungarian", p_size=8, s_x=1.05, s_y=.8, s_width=.9, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
sticker(imgurl, package="RcppHungarian", p_size=8, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
imgurl <- "~/Research/logos/RcppHungarian.png"
sticker(imgurl, package="RcppHungarian", p_size=8, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.tiff",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
imgurl <- "~/Research/logos/RcppHungarian.png"
sticker(imgurl, package="RcppHungarian", p_size=8, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.tiff",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
sticker(imgurl, package="RcppHungarian", p_size=6, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.tiff",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
sticker(imgurl, package="RcppHungarian", p_size=5, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.tiff",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
sticker(imgurl, package="RcppHungarian", p_size=5, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.eps",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
imgurl <- "~/Research/logos/RcppHungarian.tiff"
sticker(imgurl, package="RcppHungarian", p_size=5, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
imgurl <- "~/Research/logos/RcppHungarian.tiff"
sticker(imgurl, package="RcppHungarian", p_size=5, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
imgurl <- "~/Research/logos/RcppHungarian.eps"
sticker(imgurl, package="RcppHungarian", p_size=5, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
install.packages("pdftools")
imgurl <- "~/Research/logos/RcppHungarian.pdf"
sticker(imgurl, package="RcppHungarian", p_size=5, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
imgurl <- "~/Research/logos/RcppHungarian.pdf"
sticker(imgurl, package="RcppHungarian", p_size=5, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
imgurl <- "~/Research/logos/RcppHungarian.pdf"
sticker(imgurl, package="RcppHungarian", p_size=5, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.png",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
imgurl <- "~/Research/logos/RcppHungarian.pdf"
sticker(NULL, package="RcppHungarian", p_size=5, s_x=1.05, s_y=.8, s_width=.8, p_y = 1.5,
filename="RcppHungarianHex.pdf",
h_fill="#5B952F",
h_color="#113451",
spotlight=FALSE)
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::install()
